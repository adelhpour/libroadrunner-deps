# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: $(Date:yyyyMMdd)$(Rev:.r)
trigger:
  - master
  - develop

stages:
    - stage: BuildRoadrunnerDeps
      jobs:
      - job: BuildRoadrunnerDepsLinux
        timeoutInMinutes: "0"
        displayName: Linux
        continueOnError: "false"
        pool:
          vmImage: "ubuntu-18.04"
        variables:
          CCACHE_DIR: '$(Pipeline.Workspace)/ccache'
          BUILD_DIRECTORY: '$(System.DefaultWorkingDirectory)/build'
          SOURCE_DIRECTORY: '$(System.DefaultWorkingDirectory)'
          INSTALL_DIRECTORY: '$(System.DefaultWorkingDirectory)/install-azure'
        strategy:
          matrix:
            64-bit Linux Release:
              BuildType: Release
            64-bit Linux Debug:
              BuildType: Debug
        steps:
          - checkout: self
            submodules: recursive          
          - script: |
              mkdir $(BUILD_DIRECTORY)
              cd $(BUILD_DIRECTORY)
              cmake -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIRECTORY)/$(BUILD_TYPE) ..
            displayName: ConfigureCommand
          - script: |
              cd $(BUILD_DIRECTORY)
              cmake --build . --target install --config $(BUILD_TYPE) -j 12
            displayName: BuildCommand
          - task: CopyFiles@2
            inputs:
              contents: '$(INSTALL_DIRECTORY)/$(BuildType)'
              targetFolder: $(Build.ArtifactStagingDirectory)
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: $(Build.ArtifactStagingDirectory)
              artifactName: libroadrunner-deps-x64-gcc



      - job: BuildRoadrunnerDepsWindows
        timeoutInMinutes: "0"
        displayName: Windows
        continueOnError: "false"
        pool:
          vmImage: "windows-2019"
        variables:
          CCACHE_DIR: '$(Pipeline.Workspace)/ccache'
          SOURCE_DIRECTORY: '$(System.DefaultWorkingDirectory)'
          BUILD_DIRECTORY: '$(SOURCE_DIRECTORY)\build'
          INSTALL_DIRECTORY: '$(SOURCE_DIRECTORY)\install-azure'
        strategy:
          matrix:
            64-bit Windows Release:
              BuildType: Release
            64-bit Windows Debug:
              BuildType: Debug

        steps:
          - checkout: self
            submodules: recursive          
          - script: |
              mkdir $(BUILD_DIRECTORY)
              cd $(BUILD_DIRECTORY)
              cmake -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIRECTORY)\$(BUILD_TYPE) ..
            displayName: ConfigureCommand
          - script: |
              cd $(BUILD_DIRECTORY)
              cmake --build . --target install --config $(BUILD_TYPE) -j 12
            displayName: BuildCommand
          - task: CopyFiles@2
            inputs:
              contents: '$(INSTALL_DIRECTORY)/$(BuildType)'
              targetFolder: $(Build.ArtifactStagingDirectory)
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: $(Build.ArtifactStagingDirectory)
              artifactName: libroadrunner-deps-x64-gcc


      - job: BuildRoadrunnerDepsMac
        timeoutInMinutes: "0"
        displayName: MacOS
        continueOnError: "false"
        pool:
          vmImage: 'macOS-10.15'
        variables:
          CCACHE_DIR: '$(Pipeline.Workspace)/ccache'
          BUILD_DIRECTORY: '$(System.DefaultWorkingDirectory)/build'
          SOURCE_DIRECTORY: '$(System.DefaultWorkingDirectory)'
          INSTALL_DIRECTORY: '$(System.DefaultWorkingDirectory)/install-azure'
        strategy:
          matrix:
            64-bit Mac Release:
              BuildType: Release
              CMakeArgs: "-DCMAKE_INSTALL_PREFIX=../install-azure-release"
            64-bit Mac Debug:
              BuildType: Debug
              CMakeArgs: "-DCMAKE_INSTALL_PREFIX=../install-azure-debug"

        steps:
          - checkout: self
            submodules: recursive          
          - script: |
              mkdir $(BUILD_DIRECTORY)
              cd $(BUILD_DIRECTORY)
              cmake -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIRECTORY)/$(BUILD_TYPE) ..
            displayName: ConfigureCommand
          - script: |
              cd $(BUILD_DIRECTORY)
              cmake --build . --target install --config $(BUILD_TYPE) -j 12
            displayName: BuildCommand
          - task: CopyFiles@2
            inputs:
              contents: '$(INSTALL_DIRECTORY)/$(BuildType)'
              targetFolder: $(Build.ArtifactStagingDirectory)
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: $(Build.ArtifactStagingDirectory)
              artifactName: libroadrunner-deps-x64-gcc
